# This workflow builds and publishes Python packages to PyPI when a release tag is pushed
# and all tests pass

name: build and release

on:
  workflow_run:
    # Only trigger on linux-test completion to avoid duplicate runs
    # We'll check that windows-test also passed before publishing
    workflows: ["linux-test"]
    types:
      - completed

jobs:
  build:
    # Only run if:
    # 1. The linux-test workflow succeeded
    # 2. The workflow was run on a release_* tag
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'push' &&
      startsWith(github.event.workflow_run.head_branch, 'release_')
    runs-on: ubuntu-latest
    steps:
      - name: Debug - Show workflow run info
        run: |
          echo "Workflow: ${{ github.event.workflow_run.name }}"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Event: ${{ github.event.workflow_run.event }}"
          echo "Head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Head SHA: ${{ github.event.workflow_run.head_sha }}"

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Check windows-test workflow status
        uses: actions/github-script@v7
        with:
          script: |
            const headSha = '${{ github.event.workflow_run.head_sha }}';
            const event = '${{ github.event.workflow_run.event }}';

            console.log(`Looking for windows-test workflow for SHA: ${headSha}, event: ${event}`);

            // Fetch recent workflow runs for this commit
            const workflows = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'windows-test.yml',
              head_sha: headSha,
              per_page: 10  // Check up to 10 runs to be safe
            });

            console.log(`Found ${workflows.data.workflow_runs.length} windows-test workflow runs for this commit`);

            if (workflows.data.workflow_runs.length === 0) {
              core.setFailed('windows-test workflow not found for this commit');
              return;
            }

            // Find the workflow run that matches our event type (push)
            let windowsTest = workflows.data.workflow_runs.find(run => run.event === event);

            if (!windowsTest) {
              console.log('No workflow run found matching event type, using most recent');
              windowsTest = workflows.data.workflow_runs[0];
            }

            console.log(`Using workflow run #${windowsTest.run_number} (ID: ${windowsTest.id})`);
            console.log(`  Status: ${windowsTest.status}`);
            console.log(`  Conclusion: ${windowsTest.conclusion}`);
            console.log(`  Event: ${windowsTest.event}`);
            console.log(`  Created: ${windowsTest.created_at}`);
            console.log(`  Updated: ${windowsTest.updated_at}`);

            // Wait for windows-test to complete if it's still running
            if (windowsTest.status !== 'completed') {
              console.log('windows-test is still running, waiting...');
              let attempts = 0;
              const maxAttempts = 60; // 10 minutes max wait
              const waitSeconds = 10;

              while (attempts < maxAttempts) {
                await new Promise(resolve => setTimeout(resolve, waitSeconds * 1000));
                attempts++;

                const updated = await github.rest.actions.getWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: windowsTest.id
                });

                console.log(`Attempt ${attempts}/${maxAttempts} (${attempts * waitSeconds}s elapsed): status=${updated.data.status}, conclusion=${updated.data.conclusion}`);

                if (updated.data.status === 'completed') {
                  if (updated.data.conclusion === 'success') {
                    console.log('✅ windows-test completed successfully');
                    return;
                  } else {
                    core.setFailed(`❌ windows-test failed with conclusion: ${updated.data.conclusion}`);
                    return;
                  }
                }
              }

              core.setFailed(`⏱️ Timeout waiting for windows-test to complete after ${maxAttempts * waitSeconds} seconds`);
            } else if (windowsTest.conclusion !== 'success') {
              core.setFailed(`❌ windows-test failed with conclusion: ${windowsTest.conclusion}`);
            } else {
              console.log('✅ windows-test already completed successfully');
            }

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.9.5"
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.10

      - name: Install dependencies
        run: uv sync --all-groups

      - name: Build with uv (both sdist and wheel)
        run: uv build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages-${{ github.event.workflow_run.head_branch }}
          path: ./dist/
          if-no-files-found: error
          retention-days: 5

  publish:
    name: Publish to PyPI
    permissions:
      id-token: write
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-packages-${{ github.event.workflow_run.head_branch }}
          path: ./dist/

      - name: List distributions to upload
        run: ls -lh ./dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
